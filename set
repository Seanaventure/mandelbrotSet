from threading import Thread
from PIL import Image, ImageDraw
import math
import time

# Constants for the colors
black = (0, 0, 0)
blue = (0, 0, 153)
red = (255, 0, 0)
lightBlue = (102, 178, 255)
turqoise = (0, 255, 255)
purple = (255, 0, 255)
orange = (255, 102, 0)
maroon = (153, 0, 0)

# Dimensions of the image
dimX = 1024
dimY = 1024
threadIncrement = dimX // 8

# Essentially the 'Window' of the program
xMax = -1.2019
xMin = -1.20

yMax = 0.2407
yMin = 0.2352

# Used to keep track of how many calculations are made
iterations = 0

# Used to calculate the actual value of each pixel on the complex plane
intervalX = (-xMin + xMax)/dimX
intervalY = (-yMin + yMax)/dimY

# Creates an empty list with 64 spaces for images
values = [Image.new('RGB', (dimY//8, dimX//8)) for i in range(64)]
# Keeps track of threads
threads = []


def main():
    print("Starting Mandlebrot")
    # Creating the image and opening the drawing
    im = Image.new('RGB', (dimX, dimY))
    time0 = time.time()
    threadCount = 1
    for i in range(0, dimX, threadIncrement):
        for j in range(0, dimY, threadIncrement):
            newThread = Thread(target=calcSection, args=((j, i), threadIncrement, threadCount))
            threads.append(newThread)
            newThread.start()
            threadCount += 1
    for i in range(len(threads)):
        threads[i].join()
        y = (i // 8)
        x = (i - (8 * y))
        im.paste(values[i], (x * threadIncrement, y * threadIncrement))
    time1 = time.time()
    totalTime = time1 - time0
    print("Drawing took " + str(totalTime) + " seconds")
    print("Did " + str(iterations) + " calculations")
    im.save("mandlebrot1.png")


def calcSection(coords, increment, threadNum):
    im = Image.new('RGB', (increment, increment))
    draw = ImageDraw.Draw(im, 'RGB')
    for i in range(increment):
        for j in range(increment):
            draw.point((i, j), startCalculation(getC(coords[0] + i, coords[1] + j)))
    draw.text((0, 0), "({} + {}i)".format(round(getC(coords[0], coords[1])[0], 5), round(getC(coords[0], coords[1])[1], 5)))
    del draw
    values[threadNum-1] = im


def getC(x, y):
    """
    Finds out what the value of the pixel is in the complex plane
    :param x: X coordinate of pixel
    :param y: Y coordinate of pixel
    :return: The a and be values of the complex number. In form of a + bi
    """
    a = x * intervalX + xMin
    b = yMax - (y * intervalY)
    return a, b


def calculate(z, c, step) -> int:
    """
    Does the actual recursive calculation to see if the pixel is in the Mandelbrot set.
    Uses the equation f(x) = z^2 + c
    It will automatically FOIL and combine like terms, and find the result of the equation
    :param z: The z value. A complex number
    :param c: The c value. A complex number
    :param step: The current iteration of the equation. Used to determine if it is in the set
    :return: -1 if it is in the set, or how many iterations it takes to get out of the set
    """
    if math.sqrt(math.pow(z[0], 2) + math.pow(z[1], 2)) > 2:
        return step
    elif step == 100:
        return -1
    else:
        newZ = (math.pow(z[0], 2) + -1 * math.pow(z[1], 2) + c[0], 2 * z[0] * z[1] + c[1])
        global iterations
        iterations += 1
        return calculate(newZ, c, step + 1)


def startCalculation(c) -> tuple:
    # print("Starting Calculation for " + x + " " + y)
    result = calculate((0, 0), c, 0)
    if result == -1:
        # print("making black")
        return black
    elif result > 75:
        return 0, 255, 0
    elif result > 55:
        # print("making blue")
        return purple
    elif result > 40:
        return 225 - 8 * (result - 40), 0, 0
    elif result > 17:
        return 255, abs(255 - 20*(result - 17)), 0
    else:
        return 0, 8 * result - 8, 255
main()
